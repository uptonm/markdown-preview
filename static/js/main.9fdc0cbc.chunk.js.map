{"version":3,"sources":["components/Output.js","components/Input.js","App.js","serviceWorker.js","index.js"],"names":["Output","body","this","props","display","react_default","a","createElement","id","dangerouslySetInnerHTML","__html","ShowHtml","Component","marked","setOptions","breaks","placeholder","App","state","value","preview","handleChange","event","_this","setState","target","className","style","width","height","rows","onChange","components_Output","Input","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4MAYeA,qLARX,IAAIC,EAAOC,KAAKC,MAAMC,QACtB,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UAAUC,wBAAyB,CAAEC,OAAQT,sCAG5D,OAAOI,EAAAC,EAAAC,cAAA,WAAML,KAAKS,mBANDC,aCErBC,IAAOC,WAAW,CAChBC,QAAQ,IAGV,IAAMC,EAAW,2ZAiDFC,6MAlCbC,MAAQ,CAAEC,MAAOH,EAAaI,QAAS,MAMvCC,aAAe,SAAAC,GACbC,EAAKC,SAAS,CACZL,MAAOG,EAAMG,OAAON,MACpBC,QAASP,IAAOS,EAAMG,OAAON,6FAN/BjB,KAAKsB,SAAS,CAAEJ,QAASP,IAAOG,sCAWhC,OACEX,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,OACbrB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,mBACbrB,EAAAC,EAAAC,cAAA,YACEC,GAAG,SACHkB,UAAU,eACVC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAChCC,KAAK,KACLC,SAAU7B,KAAKmB,aACfF,MAAOjB,KAAKgB,MAAMC,SAGtBd,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,OACbrB,EAAAC,EAAAC,cAACyB,EAAD,CAAQ5B,QAASF,KAAKgB,MAAME,mBA5BpBR,aCNHK,mLAXX,OACEZ,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,aACbrB,EAAAC,EAAAC,cAAA,MAAImB,UAAU,yBAAd,sBACArB,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAC0B,EAAD,cAPUrB,mBCOEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9fdc0cbc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Output extends Component {\r\n  ShowHtml() {\r\n    let body = this.props.display;\r\n    return <div id=\"preview\" dangerouslySetInnerHTML={{ __html: body }} />;\r\n  }\r\n  render() {\r\n    return <div>{this.ShowHtml()}</div>;\r\n  }\r\n}\r\n\r\nexport default Output;\r\n","import React, { Component } from \"react\";\r\nimport marked from \"marked\";\r\nimport Output from \"./Output\";\r\n\r\nmarked.setOptions({\r\n  breaks: true\r\n});\r\n\r\nconst placeholder = `# a header (H1 size)\r\n## a sub header (H2 size)\r\n[a link](https://github.com/uptonm)\\n\r\n\\`System.out.printline(\"wait this isn't java\");\\`\\n\r\n\\`\\`\\`\\\\n \r\nif(value === false) {\r\n  return whyUFalseBoi?;\r\n} \\n \r\n\\`\\`\\` \r\n\\n\r\n- **BOLDED TEXT:**  in an unordered list WOWOWOWOWOWOW\r\n\\n > a blockquote  \r\n\\n ![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 1\")\r\n`;\r\nclass App extends Component {\r\n  state = { value: placeholder, preview: \"\" };\r\n\r\n  componentDidMount() {\r\n    this.setState({ preview: marked(placeholder) });\r\n  }\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      value: event.target.value,\r\n      preview: marked(event.target.value)\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col text-center\">\r\n          <textarea\r\n            id=\"editor\"\r\n            className=\"form-control\"\r\n            style={{ width: \"100%\", height: \"100%\" }}\r\n            rows=\"30\"\r\n            onChange={this.handleChange}\r\n            value={this.state.value}\r\n          />\r\n        </div>\r\n        <div className=\"col\">\r\n          <Output display={this.state.preview} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from \"react\";\nimport Input from \"./components/Input\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <h1 className=\"display-3 text-center\">Markdown Converter</h1>\n        <hr />\n\n        <Input />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}